name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }} # Set your region as a repo variable or directly here

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} # Set this as a repo secret, e.g., arn:aws:iam::123456789012:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: app-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app/backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "backend_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: app-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app/frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "frontend_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  # This is a placeholder for a future CD step.
  # For true GitOps, you would have ArgoCD or FluxCD listening for image updates.
  # For now, we apply manually after the pipeline runs.
  notify-deployment:
    name: Notify for Manual Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Notify
        run: |
          echo "CI pipeline successful. Images pushed to ECR."
          echo "Please update your Kubernetes manifests with the new image tags and run 'kubectl apply -f manifests/'"
          echo "Backend Image: ${{ needs.build-and-push.outputs.backend_image }}"
          echo "Frontend Image: ${{ needs.build-and-push.outputs.frontend_image }}"